var httpServer, httpsServer, sockjsServer, connection

config =
	bindIp: \0.0.0.0
	host: \localhost
	port: 9999
	injectUrl: null
	debug: true

serializeMessage = (event)-> JSON.stringify event
unserializeMessage = (data)-> (new Event) <<< JSON.parse(data)

debug = -> (console.log.apply this, ["SOCKJS"].concat Array.prototype.slice.call(@@)) if config.debug
error = -> (console.log.apply this, @@)

fs = require('fs')
http = require('http')
https = require('https')
sockjs = require('sockjs')
_ = require('lodash')
onFileChange = require('on-file-change')

# events manager
EventEmitter2 = require('eventemitter2').EventEmitter2

allEvents = new EventEmitter2({
	wildcard: true
})

class Event
	connId: -1
	eventId: -1
	msgId: -1
	message: ""

	respond: (responseMessage)->
		newEvent = new Event
		newEvent.connId = @connId
		newEvent.eventId = @eventId
		newEvent.msgId = @msgId
		newEvent.message = responseMessage

		debug {type: "respond", newEvent: newEvent}

		self.sendEvent newEvent

clientPath = __dirname+"/../client/sockjs-eventbus.js"
commonCodePath = __dirname+"/common.js"

createClient = ->
	# url injected into http client
	injectedUrl = (if config.injectUrl then config.injectUrl else "http://"+config.host+":"+config.port)+"/sockjs"

	debug "Creating client with url `"+injectedUrl+"`"
	
	commonCode = fs.readFileSync commonCodePath, "utf8"

	commonCode = "\n// COMMON CODE BEGIN\n"+commonCode+"// COMMON CODE END\n\n"

	clientCode = fs.readFileSync clientPath, "utf8"
	clientCode .= replace /\{URL_INJECTED_BY_BACKEND\}/, injectedUrl
	clientCode .= replace /"\{CLIENT_SERVER_COMMON_CODE_INJECTED_BY_BACKEND\}"/, commonCode
	fs.writeFileSync __dirname+"/../client/sockjs-eventbus.generated.js", clientCode, "utf8"

	if config.clientPath
		debug "Saving client to #{config.clientPath}"
		fs.writeFileSync config.clientPath, clientCode, "utf8"

	onFileChange clientPath, createClient

# serve javascript client
function httpRequestHandler(req, res)
	fs.readFile __dirname+"/../client/sockjs-eventbus.generated.js", "binary", (err, file)->
		if err
			res.writeHead 500, {"Content-Type": "text/plain"}

			if DEBUG
				res.write(err + "\n")
			else
				res.write \error

			res.end!
			return
	
		res.writeHead(200, {"Content-Type": "text/javascript"})
		res.write(file, "binary")
		res.end()

isOpened = false

lastId = 0
connections = {}

printConfig = (config)->
	_.each config, (v,k)->
		if k is not \cert and k is not \key
			debug "config.#k = #v"

attachSockJS = (sockjsServer, httpServer, ip, port)->
	# install sockjs over http server
	sockjsServer.installHandlers httpServer, {prefix:'/sockjs'}

	debug "http server listen #ip:#port"
	# enable http server
	httpServer.listen(port, ip)


self = module.exports =
	hlInit: !(_config || {})->
		config <<< _config

		debug "Initializing"
		printConfig config

		createClient!

		# create sockjs server
		sockjsServer := sockjs.createServer()

		# main and only handler for incoming connections
		sockjsServer.on 'connection', (conn)->

			# store connection in global table
			connections[conn.id] = conn

			# mark connection as opened
			conn.isOpened = true

			debug {type: "onConnection", msg: "Client connected", connId: conn.id}

			conn.on 'data', (data) -> self.incomingMessageHandler(conn.id, data)
			conn.on 'close', ->
				# mark connection as closed
				# TODO: connections should be removed from `connections` table
				conn.isOpened = false
				debug {type: "connectionClosed", connId: conn.id}

		# create http server
		if config.sslMode
			debug "Creating HTTPS Server"
			httpsServer := https.createServer {cert: config.cert, key: config.key}, httpRequestHandler

			attachSockJS sockjsServer, httpsServer, config.bindIp, config.sslPort
		else
			debug "WARNING: All sslMode is disabled, all trafic is going through unsecure channel!".red.bold

		if not config.sslMode or config.httpMode
			debug "Creating HTTP Server"

			httpServer := http.createServer httpRequestHandler
			attachSockJS sockjsServer, httpServer, config.bindIp, config.port

			debug "WARNING: unsecure http mode is enabled, all trafic through this channel is unsecure".red.bold

		

	hlUnload: !->
		debug "Closing server"
		httpServer?.close!
		httpsServer?.close!

	sendEvent: !(event)->
		debug {fn: "sendEvent", event: event}
		c = connections[event.connId]

		if !c
			error {event: event, fn: "sendEvent", error: "no connection of {connId}"}
			return

		if c.isOpened
			c.write serializeMessage(event)
		else
			error {event: event, fn: "sendEvent", error: "connection not opened"}

	incomingMessageHandler: !(connId, data)->
		debug {connId: connId, data: data, fn: "incomingMessageHandler", type: "rawData"}
	
		event = unserializeMessage data
		event.connId = connId

		debug {connId: connId, event: event, fn: "incomingMessageHandler", type: "parsedData"}

		allEvents.emit event.eventId, event.message, event

	on: (eventId, callback)->
		debug {fn: \on, eventId: eventId}
		allEvents.addListener eventId+".*", callback

	# TODO: być może powinno to być asynchronicznie w odstępie 10ms?
	#       jeśli będzie 100 klientów może być cienko z responsywnością
	broadcastMessage: (eventId, message)->
		debug {fn: \broadcastMessage, eventId: eventId, message: message}

		_.each _.filter(connections, -> it.isOpened), !(conn)->

			event =
				connId: conn.id
				eventId: eventId
				msgId: -1
				message: message

			debug {type: "broadcastMessageSingle", event: event}

			self.sendEvent event

	removeListener: (eventId, callback)->
		allEvents.removeListener eventId, callback
